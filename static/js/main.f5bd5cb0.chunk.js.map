{"version":3,"sources":["Pages/TransfromPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TransfromPage","useState","offsetX","offsetY","blur","spread","color","preoperty","setProperty","boxShadowStyle","height","width","className","htmlFor","value","type","name","id","onChange","e","Object","assign","target","style","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PA+FeA,MA7Ff,WAA0B,IAAD,EACUC,mBAAS,CACxCC,QAAS,EACTC,QAAS,IACTC,KAAM,KACNC,OAAQ,IACRC,MAAO,oBANc,mBAChBC,EADgB,KACLC,EADK,KAQjBC,EAAiB,CACrBC,OAAO,QACPC,MAAM,QACN,UAAY,GAAZ,OAAgBJ,EAAUL,QAA1B,cAAuCK,EAAUJ,QAAjD,cAA8DI,EAAUH,KAAxE,cAAkFG,EAAUF,OAA5F,cAAwGE,EAAUD,QAOpH,OACE,6BAASM,UAAU,QACjB,yBAAKA,UAAU,WACb,0CACA,yBAAKA,UAAU,YACb,2BAAOC,QAAQ,WAAf,YAEE,2BAAOC,MAAOP,EAAUL,QACvBa,KAAK,SACLC,KAAK,GACLC,GAAG,UACHC,SAAU,SAACC,GACVX,EAAYY,OAAOC,OAAO,GAAId,EAAW,CAACL,QAASiB,EAAEG,OAAOR,aAIhE,2BAAOD,QAAQ,WAAf,YAEE,2BAAOC,MAAOP,EAAUJ,QACvBY,KAAK,SACLC,KAAK,GACLC,GAAG,UACHC,SAAU,SAACC,GACVX,EAAYY,OAAOC,OAAO,GAAId,EAAW,CAACJ,QAASgB,EAAEG,OAAOR,aAGhE,2BAAOD,QAAQ,QAAf,eAEE,2BAAOC,MAAOP,EAAUH,KACvBW,KAAK,SACLC,KAAK,GACLC,GAAG,OACHC,SAAU,SAACC,GACVX,EAAYY,OAAOC,OAAO,GAAId,EAAW,CAACH,KAAMe,EAAEG,OAAOR,aAG7D,2BAAOD,QAAQ,gBAAf,iBAEE,2BAAOC,MAAOP,EAAUF,OACvBU,KAAK,SACLC,KAAK,GACLC,GAAG,eACHC,SAAU,SAACC,GACVX,EAAYY,OAAOC,OAAO,GAAId,EAAW,CAACF,OAAQc,EAAEG,OAAOR,aAG/D,2BAAOD,QAAQ,SAAf,SAEE,2BAAOC,MAAOP,EAAUD,MACvBS,KAAK,QACLC,KAAK,GACLC,GAAG,QACHC,SAAU,SAACC,GACVX,EAAYY,OAAOC,OAAO,GAAId,EAAW,CAACD,MAAOa,EAAEG,OAAOR,eAKlE,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,MAAMW,MAAOd,KAE9B,yBAAKG,UAAU,QACb,6BACE,6CACiBL,EAAUL,QAD3B,MACuCK,EAAUJ,QADjD,MAC6DI,EAAUH,KADvE,MACgFG,EAAUF,OAD1F,MACqGE,EAAUD,Y,MC3E5GkB,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5bd5cb0.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction TransfromPage() {\n  const [preoperty, setProperty] = useState({\n    offsetX: 0,\n    offsetY: '0',\n    blur: '10',\n    spread: '0',\n    color: 'rgba(0,0,0,0.1)'\n  });\n  const boxShadowStyle = {\n    height: `100px`,\n    width: `100px`,\n    'boxShadow': `${preoperty.offsetX}px ${preoperty.offsetY}px ${preoperty.blur}px ${preoperty.spread}px ${preoperty.color}`\n  }\n  // const onChangeHandle = (e:React.ChangeEvent<HTMLInputElement>, id:string) => {\n  //   const a = {id: e.target.value};\n  //   console.log(a);\n    \n  // }\n  return (\n    <section className=\"wrap\">\n      <div className=\"actions\">\n        <h3>box-shadow</h3>\n        <div className=\"property\">\n          <label htmlFor=\"offsetX\">\n            offset-x: \n            <input value={preoperty.offsetX}\n             type=\"number\" \n             name=\"\" \n             id=\"offsetX\"\n             onChange={(e) => {\n              setProperty(Object.assign({}, preoperty, {offsetX: e.target.value}));\n             }}\n             />\n          </label>\n          <label htmlFor=\"offsetY\">\n            offset-y: \n            <input value={preoperty.offsetY}\n             type=\"number\" \n             name=\"\" \n             id=\"offsetY\"\n             onChange={(e) => {\n              setProperty(Object.assign({}, preoperty, {offsetY: e.target.value}));\n             }}\n             /></label>\n          <label htmlFor=\"blur\">\n            blur-radius: \n            <input value={preoperty.blur}\n             type=\"number\" \n             name=\"\" \n             id=\"blur\"\n             onChange={(e) => {\n              setProperty(Object.assign({}, preoperty, {blur: e.target.value}));\n             }}\n             /></label>\n          <label htmlFor=\"spreadRadius\">\n            spread-radius: \n            <input value={preoperty.spread}\n             type=\"number\" \n             name=\"\" \n             id=\"spreadRadius\"\n             onChange={(e) => {\n              setProperty(Object.assign({}, preoperty, {spread: e.target.value}));\n             }}\n             /></label>\n          <label htmlFor=\"color\">\n            color: \n            <input value={preoperty.color}\n             type=\"color\" \n             name=\"\" \n             id=\"color\"\n             onChange={(e) => {\n              setProperty(Object.assign({}, preoperty, {color: e.target.value}));\n             }}\n             /></label>\n        </div>\n      </div>\n      <div className=\"right-pannel\">\n        <div className=\"result\">\n          <div className=\"box\" style={boxShadowStyle}></div>\n        </div>\n        <div className=\"code\">\n          <pre>\n            <code>\n                box-shadow: {preoperty.offsetX}px {preoperty.offsetY}px {preoperty.blur}px {preoperty.spread}px {preoperty.color}\n            </code>\n          </pre>\n        </div>\n      </div>\n      \n    </section>\n  );\n}\n\nexport default TransfromPage;","import React from 'react';\nimport TransfromPage from './Pages/TransfromPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <TransfromPage></TransfromPage>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}